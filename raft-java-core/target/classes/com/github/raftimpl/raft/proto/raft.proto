syntax="proto2";

package raft;
option java_package = "com.github.raftimpl.raft.proto";
option java_outer_classname = "RaftProto";

enum ResCode {
    RES_CODE_SUCCESS = 0;
    RES_CODE_FAIL = 1;
    RES_CODE_NOT_LEADER = 2;
}

enum EntryType {
    ENTRY_TYPE_DATA = 0;
    ENTRY_TYPE_CONFIGURATION= 1;
};

message Endpoint {
    optional string host = 1;
    optional uint32 port = 2;
}

message Server {
    optional uint32 server_id = 1;
    optional Endpoint endpoint = 2;
}

message Configuration {
    repeated Server servers = 1;
}

message LogMetaData {
    optional uint64 current_term = 1;
    optional uint32 voted_for = 2;
    optional uint64 first_log_index = 3;
    optional uint64 commit_index = 4;
}

message SnapshotMetaData {
    optional uint64 last_included_index = 1;
    optional uint64 last_included_term = 2;
    optional Configuration configuration = 3;
}

message LogEntry {
    optional uint64 term = 1;
    optional uint64 index = 2;
    optional EntryType type = 3;
    optional bytes data = 4;
};

message VoteRequest {
    optional uint32 server_id = 1; // The Id of the candidate requesting votes
    optional uint64 term = 2; // The candidate's term number
    optional uint64 last_log_term = 3; // The term number of the candidate's last log entry
    optional uint64 last_log_index = 4; // The index of the candidate's last log entry
};

message VoteResponse {
    optional uint64 term = 1; // The current term number, so that the candidate can update their own term number.
    optional bool granted = 2; // True if the candidate has won this vote
};

message AppendEntriesRequest {
    optional uint32 server_id = 1; // The leader's Id
    optional uint64 term = 2; // The leader's term number
    optional uint64 prev_log_index = 3; // The new log entry follows the previous index value.
    optional uint64 prev_log_term = 4; // The term number of the entry at prev_log_index
    optional uint64 commit_index = 5; // The index of the log entries that the leader has committed
    repeated LogEntry entries = 6; // The log entry to be stored (empty when sending a heartbeat)
};

message AppendEntriesResponse {
    optional ResCode res_code = 1; // True if the follower contains a log entry that matches both prevLogIndex and prevLogTerm
    optional uint64 term = 2; // The current term number, used by the leader to update themselves
    optional uint64 last_log_index = 3;
};

message InstallSnapshotRequest {
    optional uint32 server_id = 1;
    optional uint64 term = 2;
    optional SnapshotMetaData snapshot_meta_data = 3;
    optional string file_name = 4;
    optional uint64 offset = 5;
    optional bytes data = 6;
    optional bool is_first = 7;
    optional bool is_last = 8;
}

message InstallSnapshotResponse {
    optional ResCode res_code = 1;
    optional uint64 term = 2;
}

message GetLeaderRequest {
}

message GetLeaderResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
    optional Endpoint leader = 3;
}

message AddPeersRequest {
    repeated Server servers = 1;
}

message AddPeersResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
}

message RemovePeersRequest {
    repeated Server servers = 1;
}

message RemovePeersResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
}

message GetConfigurationRequest {
}

message GetConfigurationResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
    optional Server leader = 3;
    repeated Server servers = 4;
}
